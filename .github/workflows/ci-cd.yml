name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with: { version: "latest" }
    - name: Set up Python
      run: uv python install
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Run tests with coverage
      run: |
        uv run pytest --cov=eboekhouden_python --cov-report=xml --cov-report=term-missing
    - name: Check coverage threshold
      run: |
        COVERAGE_PERCENTAGE=$(uv run coverage report --format=total)
        echo "Coverage is ${COVERAGE_PERCENTAGE}%"
        uv run python -c "
        import sys
        coverage = float('$COVERAGE_PERCENTAGE')
        threshold = 95.0
        if coverage < threshold:
            print(f'❌ Coverage is {coverage}%, which is below the {threshold}% threshold'); sys.exit(1)
        else:
            print(f'✅ Coverage is {coverage}%, which meets the {threshold}% threshold')
        "
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  version:
    name: Compute Version Metadata
    runs-on: ubuntu-latest
    needs: test
    outputs:
      current_version: ${{ steps.get_versions.outputs.current_version }}
      pypi_version:     ${{ steps.get_versions.outputs.pypi_version }}
      should_publish:   ${{ steps.compare.outputs.should_publish }}
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with: { version: "latest" }
    - name: Set up Python
      run: uv python install
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Get versions
      id: get_versions
      run: |
        CURRENT_VERSION=$(uv run python -c "import tomli; print(tomli.load(open('pyproject.toml','rb'))['project']['version'])")
        PYPI_VERSION=$(curl -s https://pypi.org/pypi/eboekhouden-python/json | jq -r '.info.version // "0.0.0"')
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "pypi_version=$PYPI_VERSION"       >> $GITHUB_OUTPUT
    - name: Compare
      id: compare
      run: |
        CURRENT="${{ steps.get_versions.outputs.current_version }}"
        PYPI="${{ steps.get_versions.outputs.pypi_version }}"
        SHOULD=$(
          uv run python - <<PY
from packaging import version
import sys
print("true" if version.parse("$CURRENT") > version.parse("$PYPI") else "false")
PY
        )
        echo "should_publish=$SHOULD" >> $GITHUB_OUTPUT
      # Optional short summary for quick debug in Checks
    - name: Summary
      run: |
        echo "### Version summary" >> "$GITHUB_STEP_SUMMARY"
        echo "- current: \`${{ steps.get_versions.outputs.current_version }}\`" >> "$GITHUB_STEP_SUMMARY"
        echo "- pypi:    \`${{ steps.get_versions.outputs.pypi_version }}\`" >> "$GITHUB_STEP_SUMMARY"
        echo "- should publish: \`${{ steps.compare.outputs.should_publish }}\`" >> "$GITHUB_STEP_SUMMARY"

  version-check:
    name: Version Check
    runs-on: ubuntu-latest
    needs: [test, version]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
    - uses: actions/checkout@v4
    - name: Fail PR if version not bumped
      run: |
        CUR="${{ needs.version.outputs.current_version }}"
        PYPI="${{ needs.version.outputs.pypi_version }}"
        SHOULD="${{ needs.version.outputs.should_publish }}"
        if [ "$SHOULD" != "true" ]; then
          echo "::error title=Version check failed::Version $CUR is not greater than PyPI $PYPI. Bump pyproject.toml"
          echo "::error file=pyproject.toml,line=1,title=Version needs bump::Current: $CUR, PyPI: $PYPI"
          {
            echo "### ❌ Version check failed"
            echo "**Current:** \`$CUR\`  |  **PyPI:** \`$PYPI\`"
            echo ""
            echo "Update \`project.version\` in \`pyproject.toml\` to exceed \`$PYPI\`."
          } >> "$GITHUB_STEP_SUMMARY"
          exit 1
        else
          echo "### ✅ Version check passed" >> "$GITHUB_STEP_SUMMARY"
          echo "**Current:** \`$CUR\`  |  **PyPI:** \`$PYPI\`" >> "$GITHUB_STEP_SUMMARY"
        fi

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, version]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.version.outputs.should_publish == 'true'
    environment:
      name: pypi
      url: https://pypi.org/p/eboekhouden-python
    permissions:
      id-token: write      # PyPI trusted publishing
      contents: write      # create GitHub release
    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with: { version: "latest" }
    - name: Set up Python
      run: uv python install
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Build package
      run: uv build
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with: { print-hash: true }
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.version.outputs.current_version }}
        name: Release v${{ needs.version.outputs.current_version }}
        body: |
          ## Changes
          Automated release of version ${{ needs.version.outputs.current_version }}

          ## Installation
          ```bash
          pip install eboekhouden-python==${{ needs.version.outputs.current_version }}
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
